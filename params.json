{
  "name": "Dynamic dependency injection",
  "tagline": "Sample PHP code that demonstrates injecting a dependency that is not known until runtime.",
  "body": "In this article I would like to demonstrate a way to inject dependencies that are not known until runtime. There are many use cases for this and in essence it is about choosing between concrete implementations of some common interface. In object oriented design this is known at the Strategy pattern. The choice can be made in various ways, for example via a configuration option or a command line parameter in case of a console command. \r\n\r\nLet's say we have to process some remote feeds periodically. Some feeds will return data in JSON format, some in XML and some in (oh gosh!) CSV. Periodically, ok, this sounds like a cron job. For the sake of not reinventing the wheel we will use some well known libraries for our shiny new Feed Reader project, namely the Symfony Console component, which is the de-facto component in PHP to create CLI commands, and the Pimple, which is a simple dependency injection container.\r\n\r\nFirst let's set up the project:\r\n\r\n```bash\r\n$ mkdir feed-reader && cd feed-reader\r\n$ curl -s https://getcomposer.org/installer | php\r\n$ composer.phar require symfony/console\r\n$ composer.phar require pimple/pimple\r\n```\r\n\r\nOur code will live in the app/ directory and under the App root namespace. The feed reader component will live under app/FeedReader.\r\n\r\n```bash\r\n$ vim composer.json\r\n\"autoload\": {\r\n    \"psr-4\": {\r\n        \"App\\\\\": \"app/\"\r\n    }\r\n}\r\n$ mkdir -p app/FeedReader && cd app/FeedReader\r\n```\r\n\r\nSo far so good. Let's start by defining FeedReaderInterface.php:\r\n\r\n```php\r\n<?php namespace App\\FeedReader;\r\n\r\ninterface FeedReaderInterface\r\n{\r\n    public function read($url);\r\n}\r\n```\r\n\r\nThis was easy (well, intentionally). We have a read() method that requires a $url parameter, which is the url of the remote feed we will read from. Now let's implement the various concrete readers, namely JsonFeedReader.php, XmlFeedReader.hp and CsvFeedReader.php:\r\n\r\n```php\r\n<?php namespace App\\FeedReader\\Strategies;\r\n\r\nuse App\\FeedReader\\FeedReaderInterface;\r\n\r\nclass JsonFeedReader implements FeedReaderInterface\r\n{\r\n    public function read($url)\r\n    {\r\n        return sprintf('reading JSON data from %s ...', $url);\r\n    }\r\n}\r\n```\r\n\r\n```php\r\n<?php namespace App\\FeedReader\\Strategies;\r\n\r\nuse App\\FeedReader\\FeedReaderInterface;\r\n\r\nclass XmlFeedReader implements FeedReaderInterface\r\n{\r\n    public function read($url)\r\n    {\r\n        return sprintf('reading XML data from %s ...', $url);\r\n    }\r\n}\r\n```\r\n\r\n```php\r\n<?php namespace App\\FeedReader\\Strategies;\r\n\r\nuse App\\FeedReader\\FeedReaderInterface;\r\n\r\nclass CsvFeedReader implements FeedReaderInterface\r\n{\r\n    public function read($url)\r\n    {\r\n        return sprintf('reading CSV data from %s ...', $url);\r\n    }\r\n}\r\n```\r\n\r\nGreat, we have our strategies. Next, let's create the command itself, FeedReaderCommand.php. If you're not familiar with the Symfony Console component you can read about it [here](http://symfony.com/doc/current/components/console/introduction.html):\r\n\r\n```php\r\n<?php namespace App\\FeedReader;\r\n\r\nuse Symfony\\Component\\Console\\Command\\Command;\r\nuse Symfony\\Component\\Console\\Input\\InputArgument;\r\nuse Symfony\\Component\\Console\\Input\\InputInterface;\r\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\r\n\r\nclass FeedReaderCommand extends Command\r\n{\r\n    private $feedReader;\r\n\r\n    public function __construct(FeedReaderInterface $feedReader)\r\n    {\r\n        parent::__construct();\r\n        $this->feedReader = $feedReader;\r\n    }\r\n\r\n    protected function configure()\r\n    {\r\n        $this\r\n            ->setName('feed-reader')\r\n            ->setDescription('This command reads feeds. Well, it simulates it anyway.')\r\n            ->addArgument('feedType', InputArgument::REQUIRED, 'The type of the feed.')\r\n            ->addArgument('feedUrl', InputArgument::REQUIRED, 'The url of the feed.');\r\n    }\r\n\r\n    protected function execute(InputInterface $input, OutputInterface $output)\r\n    {\r\n        $output->writeln($this->feedReader->read($input->getArgument('feedUrl')));\r\n    }\r\n}\r\n```\r\n\r\nFinally let's create the script \"console.php\" in the app/ directory that bootstraps this whole thing:\r\n\r\n```php\r\n#!/usr/bin/env php\r\n<?php\r\n\r\nrequire __DIR__.'/../vendor/autoload.php';\r\n\r\nuse App\\FeedReader;\r\nuse Symfony\\Component\\Console\\Application as Console;\r\n\r\n$console = new Console();\r\n$console->add(new FeedReader\\FeedReaderCommand(new FeedReader\\Strategies\\JsonFeedReader()));\r\n$console->run();\r\n```\r\n\r\nIt is time to test it:\r\n\r\n```bash\r\npwm@pwm-mbp ~/feed-reader # app/console feed-reader json \"http://foobar.com/feed\"\r\nreading JSON data from http://foobar.com/feed ...\r\n```\r\n\r\nIt works! All is well! Hm, except one thing:\r\n\r\n```bash\r\npwm@pwm-mbp ~/feed-reader # app/console feed-reader xml \"http://foobar.com/feed\"\r\nreading JSON data from http://foobar.com/feed ...\r\npwm@pwm-mbp ~/feed-reader # app/console feed-reader csv \"http://foobar.com/feed\"\r\nreading JSON data from http://foobar.com/feed ...\r\npwm@pwm-mbp ~/feed-reader # app/console feed-reader foobar \"http://foobar.com/feed\"\r\nreading JSON data from http://foobar.com/feed ...\r\n```\r\n\r\nOf course. In console.php we injected JsonFeedReader. ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}