{
  "name": "Dynamic dependency injection",
  "tagline": "Sample PHP code that demonstrates injecting a dependency that is not known until runtime.",
  "body": "In this article I would like to demonstrate a way to inject dependencies that are not known until runtime. There are many use cases for this and in essence it is about choosing between concrete implementations of some common interface. In object oriented design this is known at the Strategy pattern. The choice can be made in various ways, for example via a configuration option or a command line parameter in case of a console command. \r\n\r\nLet's say we have to process some remote feeds periodically. Some feeds will return data in JSON format, some in XML and some in (oh gosh!) CSV. Periodically, ok, this sounds like a cron job. For the sake of not reinventing the wheel we will use some well known libraries for our shiny new Feed Reader project, namely the Symfony Console component, which is the de-facto component in PHP to create CLI commands, and the Pimple, which is a simple dependency injection container.\r\n\r\nFirst let's set up the project:\r\n\r\n```bash\r\n$ mkdir feed-reader && cd feed-reader\r\n$ curl -s https://getcomposer.org/installer | php\r\n$ composer.phar require symfony/console\r\n$ composer.phar require pimple/pimple\r\n```\r\n\r\nOur code will live in the app/ directory and under the App root namespace. The feed reader component will live under app/FeedReader.\r\n\r\n```bash\r\n$ vim composer.json\r\n\"autoload\": {\r\n    \"psr-4\": {\r\n        \"App\\\\\": \"app/\"\r\n    }\r\n}\r\n$ mkdir -p app/FeedReader && cd app/FeedReader\r\n```\r\n\r\nOk, so far so good. Let's start by defining a FeedReaderInterface:\r\n\r\n```php\r\n<?php namespace App\\FeedReader;\r\n\r\ninterface FeedReaderInterface\r\n{\r\n    public function read($url);\r\n}\r\n```\r\n\r\nThis was easy (well, intentionally). We have a read() method that requires a $url parameter, which is the url of the remote feed we will read from. Now let's implement the various concrete readers, ie. JSON, XML and CSV:\r\n\r\n```php\r\n<?php namespace App\\FeedReader;\r\n\r\ninterface FeedReaderInterface\r\n{\r\n    public function read($url);\r\n}\r\n```\r\n\r\n```php\r\n<?php namespace App\\FeedReader\\Strategies;\r\n\r\nuse App\\FeedReader\\FeedReaderInterface;\r\n\r\nclass JsonFeedReader implements FeedReaderInterface\r\n{\r\n    public function read($url)\r\n    {\r\n        return sprintf('reading JSON data from %s ...', $url);\r\n    }\r\n}\r\n\r\n\r\n\r\n<?php namespace App\\FeedReader\\Strategies;\r\n\r\nuse App\\FeedReader\\FeedReaderInterface;\r\n\r\nclass XmlFeedReader implements FeedReaderInterface\r\n{\r\n    public function read($url)\r\n    {\r\n        return sprintf('reading XML data from %s ...', $url);\r\n    }\r\n}\r\n\r\n\r\n\r\n<?php namespace App\\FeedReader\\Strategies;\r\n\r\nuse App\\FeedReader\\FeedReaderInterface;\r\n\r\nclass CsvFeedReader implements FeedReaderInterface\r\n{\r\n    public function read($url)\r\n    {\r\n        return sprintf('reading CSV data from %s ...', $url);\r\n    }\r\n}\r\n```\r\n\r\n\r\n....\r\n\r\n\r\n```php\r\n<?php namespace App\\FeedReader\\Strategies;\r\n\r\nclass JsonFeedReader\r\n{\r\n    public function read($url)\r\n    {\r\n        return sprintf('reading JSON data from %s ...', $url);\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n```php\r\n<?php namespace App\\FeedReader;\r\n\r\nuse App\\FeedReader\\Strategies\\JsonFeedReader;\r\nuse Symfony\\Component\\Console\\Command\\Command;\r\nuse Symfony\\Component\\Console\\Input\\InputArgument;\r\nuse Symfony\\Component\\Console\\Input\\InputInterface;\r\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\r\n\r\nclass FeedReaderCommand extends Command\r\n{\r\n    private $feedReader;\r\n\r\n    public function __construct(JsonFeedReader $feedReader)\r\n    {\r\n        parent::__construct();\r\n        $this->feedReader = $feedReader;\r\n    }\r\n\r\n    protected function configure()\r\n    {\r\n        $this\r\n            ->setName('feed-reader')\r\n            ->setDescription('This command reads feeds. Well, it simulates it anyway.')\r\n            ->addArgument('feedUrl', InputArgument::REQUIRED, 'The url of the feed.');\r\n    }\r\n    \r\n    protected function execute(InputInterface $input, OutputInterface $output)\r\n    {\r\n        $output->writeln($this->feedReader->read($input->getArgument('feedUrl')));\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}